//
// Generated by JTB 1.3.2
//

options {
   STATIC = false;
   IGNORE_CASE = true;
}

PARSER_BEGIN(RicettaParser)
import syntaxtree.*;
import java.util.Vector;


public class RicettaParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(RicettaParser)

TOKEN :
{
   <SEPARATORE: (["\n", "\r", ";", "."])+>
   | <FINE: "_">
   | <NUM: (["1"-"9"] (["0"-"9"])*)>
   | <STRING: (["a"-"z", "A"-"Z", "\u00e0", "\u00e8", "\u00e9", "\u00ec", "\u00f2", "\u00f9"])+>
   | <QUANTITA: (["1"-"9"] (["0"-"9"])* (["a"-"z", "A"-"Z"])*)>
   | <_SALVA: "SALVA:">
   | <_AUTORE: "AUTORE:">
   | <_CATEGORIA: "CATEGORIA:">
   | <_DIFFICOLTA: ("DIFFICOLTA':" | "DIFFICOLT\u00e0:" | "DIFFICOLTA:")>
   | <_TEMPO: "TEMPO:">
   | <_PRIVATA: "PRIVATA:">
   | <_STRUMENTI: "STRUMENTI:" | "USA:">
   | <_FESTIVITA: ("FESTIVITA':" | "FESTIVIT\u00e0:" | "FESTIVITA:")>
   | <_PROMEMORIA: "PROMEMORIA:">
   | <_PREPARA: "PREPARA:">
   | <_APRI: "APRI:">
   | <_INGREDIENTI: "INGREDIENTI:">
   | <_PREPARAZIONE: "PROCEDIMENTO:" | "PREPARAZIONE:"> : StatoPreparazione
}

SKIP :
{
   " "
   | "\t"
}

<StatoPreparazione> TOKEN :
{
   <NOTA: (~["_", "[", "]"])+>
   | <FINENOTA: "_">
      {
         input_stream.backup(1);
      } : DEFAULT
   | <_OPENLINK: "["> : StatoInserimentoLink
}

<StatoInserimentoLink> TOKEN :
{
   <ADVSTRING: (["0"-"9", "a"-"z", "A"-"Z", ":", "\\", "/", ".", "-", " ", "(", ")", "\u00e0", "\u00e8", "\u00e9", "\u00ec", "\u00f2", "\u00f9"])+>
   | <_STARTDESC: ";">
   | <_CLOSELINK: "]"> : StatoPreparazione
}

SKIP :
{
   "(*" : StatoCommento
}

<StatoCommento> SKIP :
{
   "*)" : DEFAULT
}

<StatoCommento> SKIP :
{
   <~[]>
}

Ricetta Ricetta() :
{
   NomeEsteso n0;
   NodeToken n1;
   Token n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   Opzioni n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeSequence n9;
   Sottoricetta n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   ListaIngredienti n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   Preparazione n20;
   NodeChoice n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeChoice n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;

   
}
{
   n0=NomeEsteso()
   n2=<SEPARATORE> { n1 = JTBToolkit.makeNodeToken(n2); }
   (
      { n4 = new NodeSequence(2); }
      n5=Opzioni()
      { n4.addNode(n5); }
      n7=<SEPARATORE> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n4.addNode(n6); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   (
      { n9 = new NodeSequence(2); }
      n10=Sottoricetta()
      { n9.addNode(n10); }
      n12=<SEPARATORE> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n9.addNode(n11); }
      { n8.addNode(n9); }
   )*
   { n8.nodes.trimToSize(); }
   n14=<_INGREDIENTI> { n13 = JTBToolkit.makeNodeToken(n14); }
   n15=ListaIngredienti()
   n17=<SEPARATORE> { n16 = JTBToolkit.makeNodeToken(n17); }
   n19=<_PREPARAZIONE> { n18 = JTBToolkit.makeNodeToken(n19); }
   n20=Preparazione()
   (
      (
         n23=<FINENOTA> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n21 = new NodeChoice(n22, 0); }
      |
         n25=<EOF> { 
            n25.beginColumn++; n25.endColumn++;
            n24 = JTBToolkit.makeNodeToken(n25);
         }
         { n21 = new NodeChoice(n24, 1); }
      )
      
   )
   (
      (
         n28=<FINE> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n26 = new NodeChoice(n27, 0); }
      |
         n30=<EOF> { 
            n30.beginColumn++; n30.endColumn++;
            n29 = JTBToolkit.makeNodeToken(n30);
         }
         { n26 = new NodeChoice(n29, 1); }
      )
      
   )
   
   { return new Ricetta(n0,n1,n3,n8,n13,n15,n16,n18,n20,n21,n26); }
}

NomeEsteso NomeEsteso() :
{
   NodeList n0 = new NodeList();
   NodeToken n1;
   Token n2;

   
}
{
   (
      n2=<STRING> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new NomeEsteso(n0); }
}

Opzioni Opzioni() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NomeSalvataggio n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Autore n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   TipoCategoria n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   ValoreDifficolta n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   Tempo n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   Privata n24;
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   ListaStrumenti n28;
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   Festivita n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   Promemoria n36;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n3=<_SALVA> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n4=NomeSalvataggio()
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n5 = new NodeSequence(2); }
         n7=<_AUTORE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
         n8=Autore()
         { n5.addNode(n8); }
         { n0 = new NodeChoice(n5, 1); }
      |
         { n9 = new NodeSequence(2); }
         n11=<_CATEGORIA> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         n12=TipoCategoria()
         { n9.addNode(n12); }
         { n0 = new NodeChoice(n9, 2); }
      |
         { n13 = new NodeSequence(2); }
         n15=<_DIFFICOLTA> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
         n16=ValoreDifficolta()
         { n13.addNode(n16); }
         { n0 = new NodeChoice(n13, 3); }
      |
         { n17 = new NodeSequence(2); }
         n19=<_TEMPO> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n17.addNode(n18); }
         n20=Tempo()
         { n17.addNode(n20); }
         { n0 = new NodeChoice(n17, 4); }
      |
         { n21 = new NodeSequence(2); }
         n23=<_PRIVATA> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n21.addNode(n22); }
         n24=Privata()
         { n21.addNode(n24); }
         { n0 = new NodeChoice(n21, 5); }
      |
         { n25 = new NodeSequence(2); }
         n27=<_STRUMENTI> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n25.addNode(n26); }
         n28=ListaStrumenti()
         { n25.addNode(n28); }
         { n0 = new NodeChoice(n25, 6); }
      |
         { n29 = new NodeSequence(2); }
         n31=<_FESTIVITA> { n30 = JTBToolkit.makeNodeToken(n31); }
         { n29.addNode(n30); }
         n32=Festivita()
         { n29.addNode(n32); }
         { n0 = new NodeChoice(n29, 7); }
      |
         { n33 = new NodeSequence(2); }
         n35=<_PROMEMORIA> { n34 = JTBToolkit.makeNodeToken(n35); }
         { n33.addNode(n34); }
         n36=Promemoria()
         { n33.addNode(n36); }
         { n0 = new NodeChoice(n33, 8); }
      )
      
   )
   
   { return new Opzioni(n0); }
}

NomeSalvataggio NomeSalvataggio() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<STRING> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new NomeSalvataggio(n0); }
}

Autore Autore() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<STRING> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Autore(n0); }
}

TipoCategoria TipoCategoria() :
{
   CategoriaInf n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   CategoriaSup n5;
   NodeToken n6;
   Token n7;

   
}
{
   n0=CategoriaInf()
   (
      { n2 = new NodeSequence(3); }
      n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=CategoriaSup()
      { n2.addNode(n5); }
      n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )?
   
   { return new TipoCategoria(n0,n1); }
}

CategoriaInf CategoriaInf() :
{
   NodeList n0 = new NodeList();
   NodeToken n1;
   Token n2;

   
}
{
   (
      n2=<STRING> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new CategoriaInf(n0); }
}

CategoriaSup CategoriaSup() :
{
   NodeList n0 = new NodeList();
   NodeToken n1;
   Token n2;

   
}
{
   (
      n2=<STRING> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new CategoriaSup(n0); }
}

ValoreDifficolta ValoreDifficolta() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<NUM> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ValoreDifficolta(n0); }
}

Tempo Tempo() :
{
   TempoSup n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   TempoInf n6;

   
}
{
   n0=TempoSup()
   (
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5=<STRING> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=TempoInf()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )?
   
   { return new Tempo(n0,n1); }
}

TempoSup TempoSup() :
{
   Durata n0;
   UnitaTempo n1;

   
}
{
   n0=Durata()
   n1=UnitaTempo()
   
   { return new TempoSup(n0,n1); }
}

TempoInf TempoInf() :
{
   Durata n0;
   UnitaTempo n1;

   
}
{
   n0=Durata()
   n1=UnitaTempo()
   
   { return new TempoInf(n0,n1); }
}

Durata Durata() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<NUM> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Durata(n0); }
}

UnitaTempo UnitaTempo() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<STRING> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new UnitaTempo(n0); }
}

Privata Privata() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<STRING> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Privata(n0); }
}

ListaStrumenti ListaStrumenti() :
{
   Strumento n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Strumento n5;

   
}
{
   n0=Strumento()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Strumento()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ListaStrumenti(n0,n1); }
}

Strumento Strumento() :
{
   NodeList n0 = new NodeList();
   NodeToken n1;
   Token n2;

   
}
{
   (
      n2=<STRING> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new Strumento(n0); }
}

Festivita Festivita() :
{
   NodeList n0 = new NodeList();
   NodeToken n1;
   Token n2;

   
}
{
   (
      n2=<STRING> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new Festivita(n0); }
}

Promemoria Promemoria() :
{
   NodeList n0 = new NodeList();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   (
      (
         n3=<STRING> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<NUM> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      )
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new Promemoria(n0); }
}

Sottoricetta Sottoricetta() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Ricetta n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Apri n8;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n3=<_PREPARA> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n4=Ricetta()
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n5 = new NodeSequence(2); }
         n7=<_APRI> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
         n8=Apri()
         { n5.addNode(n8); }
         { n0 = new NodeChoice(n5, 1); }
      )
      
   )
   
   { return new Sottoricetta(n0); }
}

Apri Apri() :
{
   NomeSottoricetta n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AutoreSottoricetta n5;
   NodeToken n6;
   Token n7;

   
}
{
   n0=NomeSottoricetta()
   (
      { n2 = new NodeSequence(3); }
      n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=AutoreSottoricetta()
      { n2.addNode(n5); }
      n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )?
   
   { return new Apri(n0,n1); }
}

NomeSottoricetta NomeSottoricetta() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<STRING> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new NomeSottoricetta(n0); }
}

AutoreSottoricetta AutoreSottoricetta() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<STRING> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new AutoreSottoricetta(n0); }
}

ListaIngredienti ListaIngredienti() :
{
   Ingrediente n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Ingrediente n5;

   
}
{
   n0=Ingrediente()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Ingrediente()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ListaIngredienti(n0,n1); }
}

Ingrediente Ingrediente() :
{
   NodeChoice n0;
   NodeSequence n1;
   QuantitaIngrediente n2;
   TipoIngrediente n3;
   NodeSequence n4;
   TipoIngrediente n5;
   NodeOptional n6 = new NodeOptional();
   QuantitaIngrediente n7;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=QuantitaIngrediente()
      { n1.addNode(n2); }
      n3=TipoIngrediente()
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n4 = new NodeSequence(2); }
      n5=TipoIngrediente()
      { n4.addNode(n5); }
      (
         n7=QuantitaIngrediente()
         { n6.addNode(n7); }
      )?
      { n4.addNode(n6); }
      { n0 = new NodeChoice(n4, 1); }
   )
   
   { return new Ingrediente(n0); }
}

TipoIngrediente TipoIngrediente() :
{
   NodeList n0 = new NodeList();
   NodeToken n1;
   Token n2;

   
}
{
   (
      n2=<STRING> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new TipoIngrediente(n0); }
}

QuantitaIngrediente QuantitaIngrediente() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<QUANTITA> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<NUM> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new QuantitaIngrediente(n0); }
}

Preparazione Preparazione() :
{
   NodeList n0 = new NodeList();
   NodeChoice n1;
   Nota n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Link n6;
   NodeOptional n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   DescrizioneLink n11;
   NodeToken n12;
   Token n13;

   
}
{
   (
      { n7 = new NodeOptional(); }
      (
         n2=Nota()
         { n1 = new NodeChoice(n2, 0); }
      |
         { n3 = new NodeSequence(4); }
         n5=<_OPENLINK> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=Link()
         { n3.addNode(n6); }
         (
            { n8 = new NodeSequence(2); }
            n10=<_STARTDESC> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8.addNode(n9); }
            n11=DescrizioneLink()
            { n8.addNode(n11); }
            { n7.addNode(n8); }
         )?
         { n3.addNode(n7); }
         n13=<_CLOSELINK> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n3.addNode(n12); }
         { n1 = new NodeChoice(n3, 1); }
      )
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new Preparazione(n0); }
}

Nota Nota() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<NOTA> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Nota(n0); }
}

Link Link() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<ADVSTRING> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Link(n0); }
}

DescrizioneLink DescrizioneLink() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<ADVSTRING> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new DescrizioneLink(n0); }
}
