package parser;
/* Generated By:JavaCC: Do not edit this line. RicettaParser.java */
import syntaxtree.*;
import java.util.Vector;


public class RicettaParser implements RicettaParserConstants {

  final public Ricetta Ricetta() throws ParseException {
   NomeEsteso n0;
   NodeToken n1;
   Token n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   Opzioni n5;
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeSequence n9;
   Sottoricetta n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   ListaIngredienti n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   Preparazione n20;
   NodeChoice n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeChoice n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
    n0 = NomeEsteso();
    n2 = jj_consume_token(SEPARATORE);
                     n1 = JTBToolkit.makeNodeToken(n2);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _SALVA:
      case _AUTORE:
      case _CATEGORIA:
      case _DIFFICOLTA:
      case _TEMPO:
      case _PRIVATA:
      case _STRUMENTI:
      case _FESTIVITA:
      case _PROMEMORIA:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
        n4 = new NodeSequence(2);
      n5 = Opzioni();
        n4.addNode(n5);
      n7 = jj_consume_token(SEPARATORE);
                        n6 = JTBToolkit.makeNodeToken(n7);
        n4.addNode(n6);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case _PREPARA:
      case _APRI:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
        n9 = new NodeSequence(2);
      n10 = Sottoricetta();
        n9.addNode(n10);
      n12 = jj_consume_token(SEPARATORE);
                         n11 = JTBToolkit.makeNodeToken(n12);
        n9.addNode(n11);
        n8.addNode(n9);
    }
     n8.nodes.trimToSize();
    n14 = jj_consume_token(_INGREDIENTI);
                        n13 = JTBToolkit.makeNodeToken(n14);
    n15 = ListaIngredienti();
    n17 = jj_consume_token(SEPARATORE);
                      n16 = JTBToolkit.makeNodeToken(n17);
    n19 = jj_consume_token(_PREPARAZIONE);
                         n18 = JTBToolkit.makeNodeToken(n19);
    n20 = Preparazione();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINENOTA:
      n23 = jj_consume_token(FINENOTA);
                          n22 = JTBToolkit.makeNodeToken(n23);
           n21 = new NodeChoice(n22, 0);
      break;
    case 0:
      n25 = jj_consume_token(0);
            n25.beginColumn++; n25.endColumn++;
            n24 = JTBToolkit.makeNodeToken(n25);
           n21 = new NodeChoice(n24, 1);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINE:
      n28 = jj_consume_token(FINE);
                      n27 = JTBToolkit.makeNodeToken(n28);
           n26 = new NodeChoice(n27, 0);
      break;
    case 0:
      n30 = jj_consume_token(0);
            n30.beginColumn++; n30.endColumn++;
            n29 = JTBToolkit.makeNodeToken(n30);
           n26 = new NodeChoice(n29, 1);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Ricetta(n0,n1,n3,n8,n13,n15,n16,n18,n20,n21,n26);}
    throw new Error("Missing return statement in function");
  }

  final public NomeEsteso NomeEsteso() throws ParseException {
   NodeList n0 = new NodeList();
   NodeToken n1;
   Token n2;
    label_3:
    while (true) {
      n2 = jj_consume_token(STRING);
                    n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new NomeEsteso(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Opzioni Opzioni() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NomeSalvataggio n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Autore n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   TipoCategoria n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   ValoreDifficolta n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   Tempo n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   Privata n24;
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   ListaStrumenti n28;
   NodeSequence n29;
   NodeToken n30;
   Token n31;
   Festivita n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   Promemoria n36;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _SALVA:
           n1 = new NodeSequence(2);
      n3 = jj_consume_token(_SALVA);
                       n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n4 = NomeSalvataggio();
           n1.addNode(n4);
           n0 = new NodeChoice(n1, 0);
      break;
    case _AUTORE:
           n5 = new NodeSequence(2);
      n7 = jj_consume_token(_AUTORE);
                        n6 = JTBToolkit.makeNodeToken(n7);
           n5.addNode(n6);
      n8 = Autore();
           n5.addNode(n8);
           n0 = new NodeChoice(n5, 1);
      break;
    case _CATEGORIA:
           n9 = new NodeSequence(2);
      n11 = jj_consume_token(_CATEGORIA);
                            n10 = JTBToolkit.makeNodeToken(n11);
           n9.addNode(n10);
      n12 = TipoCategoria();
           n9.addNode(n12);
           n0 = new NodeChoice(n9, 2);
      break;
    case _DIFFICOLTA:
           n13 = new NodeSequence(2);
      n15 = jj_consume_token(_DIFFICOLTA);
                             n14 = JTBToolkit.makeNodeToken(n15);
           n13.addNode(n14);
      n16 = ValoreDifficolta();
           n13.addNode(n16);
           n0 = new NodeChoice(n13, 3);
      break;
    case _TEMPO:
           n17 = new NodeSequence(2);
      n19 = jj_consume_token(_TEMPO);
                        n18 = JTBToolkit.makeNodeToken(n19);
           n17.addNode(n18);
      n20 = Tempo();
           n17.addNode(n20);
           n0 = new NodeChoice(n17, 4);
      break;
    case _PRIVATA:
           n21 = new NodeSequence(2);
      n23 = jj_consume_token(_PRIVATA);
                          n22 = JTBToolkit.makeNodeToken(n23);
           n21.addNode(n22);
      n24 = Privata();
           n21.addNode(n24);
           n0 = new NodeChoice(n21, 5);
      break;
    case _STRUMENTI:
           n25 = new NodeSequence(2);
      n27 = jj_consume_token(_STRUMENTI);
                            n26 = JTBToolkit.makeNodeToken(n27);
           n25.addNode(n26);
      n28 = ListaStrumenti();
           n25.addNode(n28);
           n0 = new NodeChoice(n25, 6);
      break;
    case _FESTIVITA:
           n29 = new NodeSequence(2);
      n31 = jj_consume_token(_FESTIVITA);
                            n30 = JTBToolkit.makeNodeToken(n31);
           n29.addNode(n30);
      n32 = Festivita();
           n29.addNode(n32);
           n0 = new NodeChoice(n29, 7);
      break;
    case _PROMEMORIA:
           n33 = new NodeSequence(2);
      n35 = jj_consume_token(_PROMEMORIA);
                             n34 = JTBToolkit.makeNodeToken(n35);
           n33.addNode(n34);
      n36 = Promemoria();
           n33.addNode(n36);
           n0 = new NodeChoice(n33, 8);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Opzioni(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NomeSalvataggio NomeSalvataggio() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STRING);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new NomeSalvataggio(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Autore Autore() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STRING);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Autore(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TipoCategoria TipoCategoria() throws ParseException {
   CategoriaInf n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   CategoriaSup n5;
   NodeToken n6;
   Token n7;
    n0 = CategoriaInf();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
        n2 = new NodeSequence(3);
      n4 = jj_consume_token(30);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = CategoriaSup();
        n2.addNode(n5);
      n7 = jj_consume_token(31);
               n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
        n1.addNode(n2);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
     {if (true) return new TipoCategoria(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public CategoriaInf CategoriaInf() throws ParseException {
   NodeList n0 = new NodeList();
   NodeToken n1;
   Token n2;
    label_4:
    while (true) {
      n2 = jj_consume_token(STRING);
                    n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new CategoriaInf(n0);}
    throw new Error("Missing return statement in function");
  }

  final public CategoriaSup CategoriaSup() throws ParseException {
   NodeList n0 = new NodeList();
   NodeToken n1;
   Token n2;
    label_5:
    while (true) {
      n2 = jj_consume_token(STRING);
                    n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new CategoriaSup(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ValoreDifficolta ValoreDifficolta() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NUM);
              n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ValoreDifficolta(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Tempo Tempo() throws ParseException {
   TempoSup n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   TempoInf n6;
    n0 = TempoSup();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case STRING:
        n3 = new NodeOptional();
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        n5 = jj_consume_token(STRING);
                       n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
        n2.addNode(n3);
      n6 = TempoInf();
        n2.addNode(n6);
        n1.addNode(n2);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
     {if (true) return new Tempo(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public TempoSup TempoSup() throws ParseException {
   Durata n0;
   UnitaTempo n1;
    n0 = Durata();
    n1 = UnitaTempo();
     {if (true) return new TempoSup(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public TempoInf TempoInf() throws ParseException {
   Durata n0;
   UnitaTempo n1;
    n0 = Durata();
    n1 = UnitaTempo();
     {if (true) return new TempoInf(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Durata Durata() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NUM);
              n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Durata(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UnitaTempo UnitaTempo() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STRING);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new UnitaTempo(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Privata Privata() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STRING);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Privata(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ListaStrumenti ListaStrumenti() throws ParseException {
   Strumento n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Strumento n5;
    n0 = Strumento();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(32);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Strumento();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ListaStrumenti(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Strumento Strumento() throws ParseException {
   NodeList n0 = new NodeList();
   NodeToken n1;
   Token n2;
    label_7:
    while (true) {
      n2 = jj_consume_token(STRING);
                    n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new Strumento(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Festivita Festivita() throws ParseException {
   NodeList n0 = new NodeList();
   NodeToken n1;
   Token n2;
    label_8:
    while (true) {
      n2 = jj_consume_token(STRING);
                    n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new Festivita(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Promemoria Promemoria() throws ParseException {
   NodeList n0 = new NodeList();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        n3 = jj_consume_token(STRING);
                       n2 = JTBToolkit.makeNodeToken(n3);
           n1 = new NodeChoice(n2, 0);
        break;
      case NUM:
        n5 = jj_consume_token(NUM);
                    n4 = JTBToolkit.makeNodeToken(n5);
           n1 = new NodeChoice(n4, 1);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
      case STRING:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_9;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new Promemoria(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Sottoricetta Sottoricetta() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Ricetta n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Apri n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _PREPARA:
           n1 = new NodeSequence(2);
      n3 = jj_consume_token(_PREPARA);
                         n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      n4 = Ricetta();
           n1.addNode(n4);
           n0 = new NodeChoice(n1, 0);
      break;
    case _APRI:
           n5 = new NodeSequence(2);
      n7 = jj_consume_token(_APRI);
                      n6 = JTBToolkit.makeNodeToken(n7);
           n5.addNode(n6);
      n8 = Apri();
           n5.addNode(n8);
           n0 = new NodeChoice(n5, 1);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Sottoricetta(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Apri Apri() throws ParseException {
   NomeSottoricetta n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AutoreSottoricetta n5;
   NodeToken n6;
   Token n7;
    n0 = NomeSottoricetta();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
        n2 = new NodeSequence(3);
      n4 = jj_consume_token(30);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = AutoreSottoricetta();
        n2.addNode(n5);
      n7 = jj_consume_token(31);
               n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
        n1.addNode(n2);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
     {if (true) return new Apri(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public NomeSottoricetta NomeSottoricetta() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STRING);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new NomeSottoricetta(n0);}
    throw new Error("Missing return statement in function");
  }

  final public AutoreSottoricetta AutoreSottoricetta() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STRING);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new AutoreSottoricetta(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ListaIngredienti ListaIngredienti() throws ParseException {
   Ingrediente n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Ingrediente n5;
    n0 = Ingrediente();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_10;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(32);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Ingrediente();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ListaIngredienti(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Ingrediente Ingrediente() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   QuantitaIngrediente n2;
   TipoIngrediente n3;
   NodeSequence n4;
   TipoIngrediente n5;
   NodeOptional n6 = new NodeOptional();
   QuantitaIngrediente n7;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case QUANTITA:
        n1 = new NodeSequence(2);
      n2 = QuantitaIngrediente();
        n1.addNode(n2);
      n3 = TipoIngrediente();
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case STRING:
        n4 = new NodeSequence(2);
      n5 = TipoIngrediente();
        n4.addNode(n5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
      case QUANTITA:
        n7 = QuantitaIngrediente();
           n6.addNode(n7);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
        n4.addNode(n6);
        n0 = new NodeChoice(n4, 1);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Ingrediente(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TipoIngrediente TipoIngrediente() throws ParseException {
   NodeList n0 = new NodeList();
   NodeToken n1;
   Token n2;
    label_11:
    while (true) {
      n2 = jj_consume_token(STRING);
                    n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_11;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new TipoIngrediente(n0);}
    throw new Error("Missing return statement in function");
  }

  final public QuantitaIngrediente QuantitaIngrediente() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUANTITA:
      n2 = jj_consume_token(QUANTITA);
                      n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case NUM:
      n4 = jj_consume_token(NUM);
                 n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new QuantitaIngrediente(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Preparazione Preparazione() throws ParseException {
   NodeList n0 = new NodeList();
   NodeChoice n1;
   Nota n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Link n6;
   NodeOptional n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   DescrizioneLink n11;
   NodeToken n12;
   Token n13;
    label_12:
    while (true) {
        n7 = new NodeOptional();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOTA:
        n2 = Nota();
           n1 = new NodeChoice(n2, 0);
        break;
      case _OPENLINK:
           n3 = new NodeSequence(4);
        n5 = jj_consume_token(_OPENLINK);
                          n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
        n6 = Link();
           n3.addNode(n6);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _STARTDESC:
              n8 = new NodeSequence(2);
          n10 = jj_consume_token(_STARTDESC);
                               n9 = JTBToolkit.makeNodeToken(n10);
              n8.addNode(n9);
          n11 = DescrizioneLink();
              n8.addNode(n11);
              n7.addNode(n8);
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
           n3.addNode(n7);
        n13 = jj_consume_token(_CLOSELINK);
                            n12 = JTBToolkit.makeNodeToken(n13);
           n3.addNode(n12);
           n1 = new NodeChoice(n3, 1);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOTA:
      case _OPENLINK:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_12;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new Preparazione(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Nota Nota() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NOTA);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Nota(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Link Link() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(ADVSTRING);
                    n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Link(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DescrizioneLink DescrizioneLink() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(ADVSTRING);
                    n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new DescrizioneLink(n0);}
    throw new Error("Missing return statement in function");
  }

  public RicettaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x7fc0,0x18000,0x400001,0x5,0x10,0x7fc0,0x40000000,0x10,0x10,0x10,0x18,0x0,0x10,0x10,0x18,0x18,0x18000,0x40000000,0x0,0x28,0x38,0x10,0x28,0x2000000,0xa00000,0xa00000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  public RicettaParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RicettaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  public RicettaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RicettaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  public RicettaParser(RicettaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  public void ReInit(RicettaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[33];
    for (int i = 0; i < 33; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
