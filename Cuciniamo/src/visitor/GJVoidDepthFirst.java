//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJVoidDepthFirst<A> implements GJVoidVisitor<A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
      }
   }

   public void visit(NodeOptional n, A argu) {
      if ( n.present() )
         n.node.accept(this,argu);
   }

   public void visit(NodeSequence n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeToken n, A argu) {}

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> NomeEsteso()
    * f1 -> <SEPARATORE>
    * f2 -> ( Opzioni() <SEPARATORE> )*
    * f3 -> ( Sottoricetta() <SEPARATORE> )*
    * f4 -> <_INGREDIENTI>
    * f5 -> ListaIngredienti()
    * f6 -> <SEPARATORE>
    * f7 -> <_PREPARAZIONE>
    * f8 -> Preparazione()
    * f9 -> ( <FINENOTA> | <EOF> )
    * f10 -> ( <FINE> | <EOF> )
    */
   public void visit(Ricetta n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
   }

   /**
    * f0 -> ( <STRING> )+
    */
   public void visit(NomeEsteso n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> ( <_SALVA> NomeSalvataggio() | <_AUTORE> Autore() | <_CATEGORIA> TipoCategoria() | <_DIFFICOLTA> ValoreDifficolta() | <_TEMPO> Tempo() | <_PRIVATA> Privata() | <_STRUMENTI> ListaStrumenti() | <_FESTIVITA> Festivita() | <_PROMEMORIA> Promemoria() )
    */
   public void visit(Opzioni n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <STRING>
    */
   public void visit(NomeSalvataggio n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <STRING>
    */
   public void visit(Autore n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> CategoriaInf()
    * f1 -> [ "(" CategoriaSup() ")" ]
    */
   public void visit(TipoCategoria n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> ( <STRING> )+
    */
   public void visit(CategoriaInf n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> ( <STRING> )+
    */
   public void visit(CategoriaSup n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <NUM>
    */
   public void visit(ValoreDifficolta n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> TempoSup()
    * f1 -> [ [ <STRING> ] TempoInf() ]
    */
   public void visit(Tempo n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> Durata()
    * f1 -> UnitaTempo()
    */
   public void visit(TempoSup n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> Durata()
    * f1 -> UnitaTempo()
    */
   public void visit(TempoInf n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> <NUM>
    */
   public void visit(Durata n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <STRING>
    */
   public void visit(UnitaTempo n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <STRING>
    */
   public void visit(Privata n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> Strumento()
    * f1 -> ( "," Strumento() )*
    */
   public void visit(ListaStrumenti n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> ( <STRING> )+
    */
   public void visit(Strumento n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> ( <STRING> )+
    */
   public void visit(Festivita n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> ( <STRING> | <NUM> )+
    */
   public void visit(Promemoria n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> ( <_PREPARA> Ricetta() | <_APRI> Apri() )
    */
   public void visit(Sottoricetta n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> NomeSottoricetta()
    * f1 -> [ "(" AutoreSottoricetta() ")" ]
    */
   public void visit(Apri n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> <STRING>
    */
   public void visit(NomeSottoricetta n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <STRING>
    */
   public void visit(AutoreSottoricetta n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> Ingrediente()
    * f1 -> ( "," Ingrediente() )*
    */
   public void visit(ListaIngredienti n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> QuantitaIngrediente() TipoIngrediente()
    *       | TipoIngrediente() [ QuantitaIngrediente() ]
    */
   public void visit(Ingrediente n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> ( <STRING> )+
    */
   public void visit(TipoIngrediente n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <QUANTITA>
    *       | <NUM>
    */
   public void visit(QuantitaIngrediente n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> ( Nota() | <_OPENLINK> Link() [ <_STARTDESC> DescrizioneLink() ] <_CLOSELINK> )+
    */
   public void visit(Preparazione n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <NOTA>
    */
   public void visit(Nota n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <ADVSTRING>
    */
   public void visit(Link n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <ADVSTRING>
    */
   public void visit(DescrizioneLink n, A argu) {
      n.f0.accept(this, argu);
   }

}
